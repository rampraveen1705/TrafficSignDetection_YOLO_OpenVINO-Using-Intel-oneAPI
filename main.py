"""TrafficSignDetection_YOLO_OpenVINO-Using-Intel-oneAPI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_e8MThLZO_xJZHEeXWt47mbDNuy6cZeH
"""

!pip install ultralytics

from ultralytics import YOLO
import cv2
import numpy as np
import matplotlib.pyplot as plt
print("Setup complete!")

# Load the YOLOv8 nano model
model = YOLO("yolov8n.pt")

# Download a sample traffic image
!wget https://raw.githubusercontent.com/ultralytics/yolov5/master/data/images/bus.jpg -O traffic_sample.jpg

# Load the image
image_path = 'traffic_sample.jpg'  # Replace with your file if uploaded
image = cv2.imread(image_path)
image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)  # Convert to RGB for display

# Run YOLOv8 inference
results = model(image_rgb)

# Plot the results
plt.figure(figsize=(10, 6))
plt.imshow(results[0].plot())  # Plot detections
plt.title("Traffic Sign Detection with YOLOv8")
plt.axis('off')
plt.show()

# Process a video frame-by-frame
video_path = 'traffic_video.mp4'  # Replace with your video file
cap = cv2.VideoCapture(video_path)

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break
    frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    results = model(frame_rgb)

    # Display the frame (in Colab, use matplotlib)
    plt.imshow(results[0].plot())
    plt.axis('off')
    plt.show()
    plt.clf()  # Clear the figure for the next frame

cap.release()

from multiprocessing import Pool

def process_frame(frame):
    frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    results = model(frame_rgb)
    return results[0].plot()

cap = cv2.VideoCapture(video_path)
frames = []
while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break
    frames.append(frame)
cap.release()

# Process frames in parallel
with Pool(4) as p:
    processed_frames = p.map(process_frame, frames[:20])  # Limit to 20 frames for demo

# Display a few results
for i, frame in enumerate(processed_frames[:5]):
    plt.figure(figsize=(10, 6))
    plt.imshow(frame)
    plt.title(f"Frame {i+1}")
    plt.axis('off')
    plt.show()



from ultralytics import YOLO
model = YOLO("yolov8n.pt")
model.export(format="onnx")
